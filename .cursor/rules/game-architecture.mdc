---
description:
globs:
alwaysApply: true
---
# Game Architecture Guidelines

## Core Structure
- Main game logic is in [src/game/Game.ts](mdc:src/game/Game.ts)
- Game component wrapper is in [src/components/GameComponent.tsx](mdc:src/components/GameComponent.tsx)
- Entry point is [src/App.tsx](mdc:src/App.tsx)

## Key Principles
1. Keep React and Phaser Separate
   - React handles component lifecycle and container setup
   - Phaser manages all game state and logic
   - No external state management libraries unless absolutely necessary

2. Game Component Responsibilities
   - Container setup and sizing
   - WebGL support detection
   - Game instance lifecycle (init/destroy)
   - Error handling and fallback UI
   - Window resize handling
   - Visibility state management (pause/resume)

3. Game Class Responsibilities
   - Game configuration and setup
   - Scene management
   - Audio handling with fallbacks
   - Performance monitoring (dev only)
   - WebGL/Canvas renderer selection
   - Resource cleanup

## Error Handling
- Always provide user-friendly fallback UI for errors
- Handle WebGL support gracefully with Canvas fallback
- Implement proper cleanup in error scenarios
- Log meaningful error messages for debugging

## Performance
- Use proper cleanup in useEffect hooks
- Implement proper game pause/resume on visibility change
- Calculate optimal canvas dimensions based on container size
- Round dimensions to even numbers to avoid scaling artifacts
- Minimum game dimensions: 640x360

## Audio Handling
- Skip audio loading if not needed
- Provide dummy sound handlers to prevent crashes
- Handle audio context initialization errors gracefully

## Development Guidelines
1. Focus on core game functionality first
2. Keep UI components minimal until core game works
3. Test on different browsers and hardware
4. Monitor performance in development
5. Clean up resources properly

# Game Architecture

This tower defense game uses Phaser 3 for the game engine with a React wrapper component.

## Core Components

- **Game Component** ([src/components/GameComponent.tsx](mdc:src/components/GameComponent.tsx)): React component that initializes and contains the Phaser game instance
- **Game Class** ([src/game/Game.ts](mdc:src/game/Game.ts)): Main Phaser game configuration and setup
- **Game Scene** ([src/game/scenes/GameScene.ts](mdc:src/game/scenes/GameScene.ts)): Primary scene containing gameplay logic

## Scene Structure

The game uses multiple scenes:
- **PreloadScene**: Loads assets before gameplay begins
- **GameScene**: Main gameplay scene with map, enemies, and builder
- Additional UI scenes may overlay the game scene

## Key Systems

1. **Builder System**: Player-controlled character that builds and repairs structures
2. **Structure System**: Walls, towers, and traps placed to defend the base
3. **Enemy System**: Different types of enemies that follow paths to the base
4. **Wave System**: Controls the spawning and progression of enemy waves
5. **Path System**: Manages enemy movement paths and pathfinding
6. **Economy System**: Controls resources gained from defeating enemies

## Player Interaction

The player controls the Builder character to:
1. Move around the map with arrow keys
2. Select structure types with number keys (1-3)
3. Place structures by clicking
4. Repair damaged structures
5. Collect resources

## Game Flow

1. Level begins with a brief tutorial phase
2. Waves of enemies attack in succession
3. Player builds defenses to protect the base
4. Special enemies and mini-bosses appear in later waves
5. Level is complete when all waves are defeated

## Technical Implementation

- Uses Phaser's Arcade Physics for collisions
- Implements custom path following for enemies
- Uses event system for communication between components
- Handles errors and resource loading gracefully
- Provides fallbacks for missing assets
