---
description:
globs:
alwaysApply: true
---
# React Component Guidelines

Magic Defense Arena uses React 19 for UI components. These guidelines ensure consistent, maintainable components.

## Component Structure

### Functional Components

Use functional components with hooks:

```tsx
const ComponentName: React.FC<ComponentProps> = ({ prop1, prop2 }) => {
  // State and hooks
  const [state, setState] = useState<StateType>(initialValue);
  
  // Event handlers
  const handleEvent = () => {
    // Logic
  };
  
  // Rendering
  return (
    <div className="component-wrapper">
      {/* Component content */}
    </div>
  );
};
```

## Component Types

1. **Page Components** - High-level views like MainMenu, SquadSelection
2. **Feature Components** - Self-contained features like CharacterSelector
3. **UI Components** - Reusable UI elements like Button, Card
4. **Game-specific Components** - GameComponent, integration points with Phaser

## State Management

- Use React's useState and useReducer for component-level state
- For cross-component state, pass props or use context
- For game state that needs to be saved/persisted, consider a central store

## Styling

- Use Tailwind CSS for all styling
- Create custom game theme colors in tailwind.config.js
- Use consistent class naming conventions
- Apply responsive design principles for different screen sizes

## Game Integration

When integrating with Phaser:

1. Use refs to get DOM elements for Phaser canvas
2. Handle mounting/unmounting properly in useEffect
3. Clean up event listeners and destroy game instances on unmount
4. Pass game events up to React components using callbacks

## Performance

- Memoize expensive operations with useMemo and useCallback
- Use React.memo for components that render often but rarely change
- Avoid unnecessary re-renders
- Keep game-related calculations in Phaser, not React
