---
description:
globs:
alwaysApply: true
---
# Coding Standards

Magic Defense Arena follows these coding standards to ensure high quality, maintainable code.

## TypeScript

- Use TypeScript for all code
- Always define proper interfaces and types
- Avoid `any` type when possible
- Use access modifiers (private, protected, public) appropriately
- Leverage TypeScript's advanced features (generics, union types, etc.) when beneficial

## Naming Conventions

- **Classes**: PascalCase (e.g., `Character`, `EconomySystem`)
- **Interfaces**: PascalCase, often prefixed with `I` (e.g., `ICharacterData`)
- **Types**: PascalCase (e.g., `CharacterType`, `Point`)
- **Variables/Properties**: camelCase (e.g., `enemyCount`, `pathIndex`)
- **Methods**: camelCase (e.g., `calculatePath()`, `spendCoins()`)
- **Constants**: UPPER_SNAKE_CASE for true constants (e.g., `MAX_LEVEL`, `BASE_DAMAGE`)
- **Enums**: PascalCase for enum name, PascalCase for values (e.g., `CharacterType.Fire`)

## Code Style

- Use 2-space indentation
- Use semicolons at the end of statements
- Use single quotes for string literals
- Place opening braces on the same line
- Add trailing commas in multi-line object/array literals
- Keep lines to a reasonable length (max 100 characters)

## File Organization

- One class per file when possible
- Group related functionality in directories
- Export all public APIs through index files
- Keep code organized by logical domains

## Comments and Documentation

- Comment complex algorithms and business logic
- Use JSDoc comments for public APIs
- Document event types and their payloads
- Avoid obvious comments that duplicate code
- Create separate documentation for game design concepts

## Error Handling

- Use try/catch blocks for error-prone operations
- Provide meaningful error messages
- Handle expected failure cases gracefully
- Log errors appropriately for debugging

## Performance

- Minimize object creation in frequently called methods
- Optimize loops and array operations
- Use object pooling for frequently created/destroyed objects
- Profile and optimize hotspots

## Testing

- Write unit tests for critical game systems
- Create automated tests for game mechanics
- Implement visual testing tools for UI components
- Test across different browsers and devices
